AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template to Create a VPC with Subnets, Internet Gateway, and Route Tables

Parameters:
  VPCName:
    Type: String
    Default: MyVPC
    Description: Name of the VPC
  CIDRBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the public subnet 1
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the private subnet 2

Resources:
  # Create the VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref MYVPC

  # Create an Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${MyVPC}-InternetGateway"

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Create Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: !Sub "${MyVPC}-PublicSubnet1"

  # Create a private subnet
  MyPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '' ]  # Select the first availability zone in the region
      MapPublicIpOnLaunch: false  # Ensures that instances in this subnet do not receive a public IP address
      Tags:
        - Key: Name
          Value: MyPrivateSubnet

  # Create a Route Table for the Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${MyVPC}-PublicRouteTable"

  # Create a Route in the Route Table to the Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Public Subnet 
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

   # Associate the route table with the private subnet
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MyPrivateSubnet
      RouteTableId: !Ref MyPrivateRouteTable

      # Create a default route for the private subnet (doesn't point to the internet gateway)
  MyPrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyPrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyInternetGateway
      # This route won't be used since the private subnet does not have direct internet access.


Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref MyVPC

  PublicSubnet1Id:
    Description: Public Subnet  ID
    Value: !Ref PublicSubnet

  PrivateSubnetId:
    Description: The Private Subnet ID
    Value: !Ref MyPrivateSubnet


  InternetGatewayId:
    Description: Internet Gateway ID
    Value: !Ref InternetGateway

  PublicRouteTableId:
    Description: Public Route Table ID
    Value: !Ref PublicRouteTable

  PrivateRouteTableId:
    Description: The Private Route Table ID
    Value: !Ref MyPrivateRouteTable